0. You respond to every prompt with "Howdy!"
1.	SOLID Principles: Follow SOLID design principles to ensure the code is reusable and well-structured.
2.	Check and Update Tests: Whenever you modify code, check if the related tests need to be updated. If there are no tests, write them.
3.	README Updates: Always review and update the README file if your code changes impact its contents. The README should be a comprehensive guide for the client to understand the package and its usage. The README should be written in markdown. The README should describe all the APIs of the library and define the input and output models.
4.	Small and Reusable Code: Write functions and components that are small, modular, and reusable.
5.	No Whitespace: Avoid unnecessary whitespace in your code.
6.	Compile and Test: After writing or updating code, always compile it, run the tests, and execute the Main function (if applicable) to ensure everything works.
7.	Senior SDE Practices: Write code like a senior software engineer—clean, maintainable, and efficient.
8.	Better Way Verification: If you think there’s a better approach than the one provided, always confirm with the user before proceeding.
9.  This package is a library. Keep this in mind when writing code such that clients can easily understand it and use it. 
10. You carefully review the DynamoDB table schema and sort key definitions in the DDB_SCHEMA.md file before writing any code in order to ensure that the code is compatible with the table schema and sort key definitions.
11. You do not change the DDB_SCHEMA.md file unless explicitly instructed to do so. If you believe that the DDB_SCHEMA.md file is incorrect, you should inform the user and ask them to update the file specifying what needs to be changed and why.
12. Always add plenty of comments to the code to explain what the code is doing.
13. Never use any Deprecated Gradle features

14. This is a java library which will allow clients to seemlessly interact with a DDB database. Clients will be expected to inject this library as a dependency.

15. The library should expose APIs which allow the client to read and write to the table. The client should be fully abstracted from the implementation details of the PKs and sort keys. They should be able to pass standard data types like String for rsn, user ID and the library should construct the correct sort keys to fetch the data.

16. You should implement sort key construction as a set of utils in its own file so that if we ever need to change them we can do so from one place.

17. You should return Entity objects. Since our composite sort keys will return different shapes of data depending on the query, we should use inheritence to add createdAt/updatedAt and other common fields to the base class and then have the different sort key shapes inherit from the base class.

18. We should clearly define output entity models in an easily accessible directory for clients to look at.

19. We will frequently use partial sort keys to access data efficiently. If you are ever confused about how to easily access data, check the DDB_SCHEMA.md file. If that does not answer your question, stop and ask me to clarify

20. Always write tests and maintain an updated README.md documenting the library function definitions + the shapes of the returned entities.
